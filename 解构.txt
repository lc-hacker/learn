ES6允许按照一定的模式从数组和对象中提取值对对应变量进行赋值


数组：
	左边的变量按照右边的数据结构进行匹配，
	左边遇到无变量的空位及跨过去（不完全解构），
	右边遇到无值的情况变量赋值undefined（解构不成功），
	右边如果结构不同属于不可遍历的结构那就会报错

	结构允许变量设置默认值，只有在判断该位置 === undefinde 才回允许默认值执行  [x=1]=[] // x=1 
	如果默认值是一个表达式例如函数 只有在用到他的情况下才会去计算 惰性
	let [x = 1, y = x] = [2];    // x=2; y=2  优先去依次解构


对象：
	数组的解构是按顺序的结构对应，对象的解构是按照属性名和变量的名称一致才能解构到，取不到值变量为undefined；
	如果某些情况下 你需要改变的变量名字不想跟对象的属性名一致 那可以这样解构
	{a: ccc}={a: 'pp'}
	// ccc === 'pp'

	let { foo: foo, bar: bar } = { foo: "aaa", bar: "bbb" };
	也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。
	上面的只不过是简写而已；

	嵌套赋值
	let obj = {};
	let arr = [];

	({ foo: obj.prop, bar: arr[0] } = { foo: 123, bar: true });

	obj // {prop:123}
	arr // [true]

	对象内嵌数组解构
	const node = {
 	 loc: {
  	  start: {
  	    line: 1,
  	    column: 5
   	 	}
 	 }
	};

	let { loc, loc: { start }, loc: { start: { line }} } = node;
	line // 1
	loc  // Object {start: Object}
	start // Object {line: 1, column: 5}

	对象的默认解构也是同数组一致的；
	
	对象跟数组对应结构
	let arr = [1, 2, 3];
	let {0 : first, [arr.length - 1] : last} = arr;
	first // 1
	last // 3

	字符串也支持结构对应string的下标

结构的时候如果右边不是数组或者对象，先是会转变为对象，如果转变不为对象就会报错；

函数的参数也可以解构赋值
	